renv::activate()
renv::upgrade()
renv::install('tidyverse')
?rmarkdown::render()
rmarkdown::render("resume.Rmd", output_format = "latex_document", output_file = "resume.tex")
rmarkdown::render("resume.Rmd", output_format = "latex_document", output_file = "resume2.tex")
knitr::knit("resume.Rmd", output = "resume2.tex")
renv::install('pagedown')
renv::snapshot()
renv::snapshot()
renv::activate()
library(httr)
library(jsonlite)
library(httr)
library(jsonlite)
owner <- "hxfan1227"
repo <- "curriculum-vitae"
path <- "data/cv.bib"
url <- paste0("https://api.github.com/repos/", owner, "/", repo, "/contents/", path)
response <- GET(url)
if (status_code(response) == 200) {
file_info <- fromJSON(content(response, "text"))
file_content <- file_info$content
decoded_content <- rawToChar(base64enc::base64decode(file_content))
writeLines(decoded_content, 'publications.bib')
} else {
# 如果请求失败，打印错误信息
cat("Failed to fetch file. Status code:", status_code(response), "\n")
}
big_file <- paste(readLines('publications.bib'), collapse = "")
big_file <- unlist(strsplit(x = big_file, split = "@", fixed = TRUE))
big_file
big_file <- big_file[nchar(big_file) != 0]
big_file
big_file
strsplit(x = big_file, split = "(,\t)|(,  )")
strsplit(x = big_file, split = "(,\t)|(,  )")
big_file
file_list <- strsplit(x = big_file, split = "(,\t)|(,  )")
file_list
file_list[[1]]
file_list[[1]][1]
lapply(file_list, function(.x) {sub(pattern = , replacement = 'article{', x = .x[1])})
lapply(file_list, function(.x) {sub('article{', replacement = '', x = .x[1])})
lapply(file_list, function(.x) {sub('[a-z]*{', replacement = '', x = .x[1])})
lapply(file_list, function(.x) {sub('[a-z]*{', replacement = '', x = .x[1], fixed = T)})
lapply(file_list, function(.x) {sub('[a-z]*\\{', replacement = '', x = .x[1])})
sapply(file_list, function(.x) {sub('[a-z]*\\{', replacement = '', x = .x[1])})
lapply(file_list, function(.x) {sub('[a-z]*\\{', replacement = '', x = .x[1])})
sapply(file_list, function(.x) {sub('[a-z]*{', replacement = '', x = .x[1])})
sapply(file_list, function(.x) {sub('[a-z]*\\{', replacement = '', x = .x[1])})
all_entry <- sapply(file_list, function(.x) {sub('[a-z]*\\{', replacement = '', x = .x[1])})
grep('_CH$', all_entry)
all_entry[grep('_CH$', all_entry)]
sapply(all_entry[grep('_CH$', all_entry)], function(.x) {sub('_CH$', '', .x)})
sapply(all_entry[grep('_CH$', all_entry)], function(.x) {sub('_CH$', '', .x)}, USE.NAMES = F)
big_file <- paste(readLines('publications.bib'), collapse = "")
big_file <- unlist(strsplit(x = big_file, split = "@", fixed = TRUE))
big_file <- big_file[nchar(big_file) != 0]
file_list <- strsplit(x = big_file, split = "(,\t)|(,  )")
all_entry <- sapply(file_list, function(.x) {sub('[a-z]*\\{', replacement = '', x = .x[1])}, USE.NAMES = F)
sapply(all_entry[grep('_CH$', all_entry)], function(.x) {sub('_CH$', '', .x)}, USE.NAMES = F)
？mapply
?mapply
all_entry[grep('_CH$', all_entry)]
ch_entry <- all_entry[grep('_CH$', all_entry)]
en_entry <- sapply(ch_entry, function(.x) {sub('_CH$', '', .x)}, USE.NAMES = F)
mapply(function(ch, en) {sprintf('\defdoublelangentry{%s}{%s}\n', ch, en)}, ch_entry, en_entry)
mapply(function(ch, en) {sprintf('\\defdoublelangentry{%s}{%s}\n', ch, en)}, ch_entry, en_entry)
?mapply(function, ...)
mapply(function(ch, en) {sprintf('\defdoublelangentry{%s}{%s}\n', ch, en)}, ch_entry, en_entry, SIMPLIFY = T)
mapply(function(ch, en) {sprintf('\\defdoublelangentry{%s}{%s}\n', ch, en)}, ch_entry, en_entry, SIMPLIFY = T)
mapply(function(ch, en) {sprintf('\\defdoublelangentry{%s}{%s}\n', ch, en)}, ch_entry, en_entry, SIMPLIFY = T, USE.NAMES = F)
mapply(function(ch, en) {sprintf('%sdefdoublelangentry{%s}{%s}\n','\' ch, en)}, ch_entry, en_entry, SIMPLIFY = T, USE.NAMES = F)
mapply(function(ch, en) {sprintf('%sdefdoublelangentry{%s}{%s}\n','\', ch, en)}, ch_entry, en_entry, SIMPLIFY = T, USE.NAMES = F)
mapply(function(ch, en) {sprintf('{%s}defdoublelangentry{%s}{%s}\n','\', ch, en)}, ch_entry, en_entry, SIMPLIFY = T, USE.NAMES = F)
mapply(function(ch, en) {sprintf('{%s}defdoublelangentry{%s}{%s}\n','\', ch, en)}, ch_entry, en_entry, SIMPLIFY = T, USE.NAMES = F)
mapply(function(ch, en) {sprintf('%sdefdoublelangentry{%s}{%s}\n','\', ch, en)}, ch_entry, en_entry, SIMPLIFY = T, USE.NAMES = F)
mapply(function(ch, en) {sprintf('%sdefdoublelangentry{%s}{%s}\n','\', ch, en)}, ch_entry, en_entry, SIMPLIFY = T, USE.NAMES = F)
mapply(function(ch, en) {sprintf('{%s}defdoublelangentry{%s}{%s}\n','\', ch, en)}, ch_entry, en_entry, SIMPLIFY = T, USE.NAMES = F)
mapply(function(ch, en) {sprintf('{%s}defdoublelangentry{%s}{%s}\n', '\\', ch, en)}, ch_entry, en_entry, SIMPLIFY = T)
mapply(function(ch, en) {sprintf('{%s}defdoublelangentry{%s}{%s}\n', '\', ch, en)}, ch_entry, en_entry, SIMPLIFY = T)
mapply(function(ch, en) {sprintf('{%s}defdoublelangentry{%s}{%s}\n', '\', ch, en)}, ch_entry, en_entry, SIMPLIFY = T)
mapply(function(ch, en) {sprintf('%sdefdoublelangentry{%s}{%s}\n', '\\', ch, en)}, ch_entry, en_entry, SIMPLIFY = T)
mapply(function(ch, en) {sprintf('{%s}defdoublelangentry{%s}{%s}\n', '\', ch, en)}, ch_entry, en_entry, SIMPLIFY = T)
mapply(function(ch, en) {sprintf('%sdefdoublelangentry{%s}{%s}\n', '\\', ch, en)}, ch_entry, en_entry, SIMPLIFY = T)
mapply(function(ch, en) {sprintf('{%s}defdoublelangentry{%s}{%s}\n', '\', ch, en)}, ch_entry, en_entry, SIMPLIFY = T)
mapply(function(ch, en) {sprintf('%s defdoublelangentry{%s}{%s}\n', '\\', ch, en)}, ch_entry, en_entry, SIMPLIFY = T)
mapply(function(ch, en) {sprintf('{%s}defdoublelangentry{%s}{%s}\n', '\', ch, en)}, ch_entry, en_entry, SIMPLIFY = T)
mapply(function(ch, en) {sprintf('\\defdoublelangentry{%s}{%s}\n', ch, en)}, ch_entry, en_entry, SIMPLIFY = T)
mapply(function(ch, en) {sprintf('\defdoublelangentry{%s}{%s}\n', ch, en)}, ch_entry, en_entry, SIMPLIFY = T)
mapply(function(ch, en) {sprintf('\\defdoublelangentry{%s}{%s}\n', ch, en)}, ch_entry, en_entry, SIMPLIFY = T)
mapply(function(ch, en) {sprintf('\\defdoublelangentry{%s}{%s}\n', ch, en)}, ch_entry, en_entry, SIMPLIFY = T, USE.NAMES = F)
paste0(mapply(function(ch, en) {sprintf('\\defdoublelangentry{%s}{%s}\n', ch, en)}, ch_entry, en_entry, SIMPLIFY = T, USE.NAMES = F))
paste0(mapply(function(ch, en) {sprintf('\\defdoublelangentry{%s}{%s}\n', ch, en)}, ch_entry, en_entry, SIMPLIFY = T, USE.NAMES = F), collapse = '')
cat(paste0(mapply(function(ch, en) {sprintf('\\defdoublelangentry{%s}{%s}\n', ch, en)}, ch_entry, en_entry, SIMPLIFY = T, USE.NAMES = F), collapse = ''))
writeLines(paste0(mapply(function(ch, en) {sprintf('\\defdoublelangentry{%s}{%s}\n', ch, en)}, ch_entry, en_entry, SIMPLIFY = T, USE.NAMES = F), collapse = ''), 'ch_en.tex')
paste(readLines('publications.bib'), collapse = "")
readLines('publications.bib')
?writeLines
merge_bib <- function(fname1, fname2) {
bib2 <- readLines(fname2)
con <- file(fname1, open = "a")
writeLines(bib2, con)
}
merge_bib('publications.bib', 'ch_en.bib')
library(httr)
library(jsonlite)
owner <- "hxfan1227"
repo <- "curriculum-vitae"
path <- "data/cv.bib"
url <- paste0("https://api.github.com/repos/", owner, "/", repo, "/contents/", path)
response <- GET(url)
if (status_code(response) == 200) {
file_info <- fromJSON(content(response, "text"))
file_content <- file_info$content
decoded_content <- rawToChar(base64enc::base64decode(file_content))
writeLines(decoded_content, 'publications.bib')
} else {
# 如果请求失败，打印错误信息
cat("Failed to fetch file. Status code:", status_code(response), "\n")
}
merge_bib <- function(fname1, fname2) {
bib2 <- readLines(fname2)
con <- file(fname1, open = "a")
writeLines(bib2, con)
}
big_file <- paste(readLines('publications.bib'), collapse = "")
big_file <- unlist(strsplit(x = big_file, split = "@", fixed = TRUE))
big_file <- big_file[nchar(big_file) != 0]
file_list <- strsplit(x = big_file, split = "(,\t)|(,  )")
all_entry <- sapply(file_list, function(.x) {sub('[a-z]*\\{', replacement = '', x = .x[1])}, USE.NAMES = F)
ch_entry <- all_entry[grep('_CH$', all_entry)]
en_entry <- sapply(ch_entry, function(.x) {sub('_CH$', '', .x)}, USE.NAMES = F)
writeLines(paste0(mapply(function(ch, en) {sprintf('\\defdoublelangentry{%s}{%s}\n', ch, en)}, ch_entry, en_entry, SIMPLIFY = T, USE.NAMES = F), collapse = ''), 'ch_en.tex')
merge_bib('publications.bib', 'ch_en.bib')
readLines('ch_en.bib')
library(httr)
library(jsonlite)
owner <- "hxfan1227"
repo <- "curriculum-vitae"
path <- "data/cv.bib"
url <- paste0("https://api.github.com/repos/", owner, "/", repo, "/contents/", path)
response <- GET(url)
if (status_code(response) == 200) {
file_info <- fromJSON(content(response, "text"))
file_content <- file_info$content
decoded_content <- rawToChar(base64enc::base64decode(file_content))
writeLines(decoded_content, 'publications.bib')
} else {
# 如果请求失败，打印错误信息
cat("Failed to fetch file. Status code:", status_code(response), "\n")
}
merge_bib <- function(fname1, fname2) {
bib2 <- readLines(fname2)
con <- file(fname1, open = "a")
writeLines(bib2, con)
close(con)
}
merge_bib('publications.bib', 'ch_en.bib')
library(httr)
library(jsonlite)
owner <- "hxfan1227"
repo <- "curriculum-vitae"
path <- "data/cv.bib"
url <- paste0("https://api.github.com/repos/", owner, "/", repo, "/contents/", path)
response <- GET(url)
if (status_code(response) == 200) {
file_info <- fromJSON(content(response, "text"))
file_content <- file_info$content
decoded_content <- rawToChar(base64enc::base64decode(file_content))
writeLines(decoded_content, 'publications.bib')
} else {
# 如果请求失败，打印错误信息
cat("Failed to fetch file. Status code:", status_code(response), "\n")
}
merge_bib <- function(fname1, fname2) {
bib2 <- readLines(fname2)
con <- file(fname1, open = "a")
writeLines(bib2, con)
close(con)
}
merge_bib('publications.bib', 'ch_en.bib')
big_file <- paste(readLines('publications.bib'), collapse = "")
big_file <- unlist(strsplit(x = big_file, split = "@", fixed = TRUE))
big_file <- big_file[nchar(big_file) != 0]
file_list <- strsplit(x = big_file, split = "(,\t)|(,  )")
all_entry <- sapply(file_list, function(.x) {sub('[a-z]*\\{', replacement = '', x = .x[1])}, USE.NAMES = F)
ch_entry <- all_entry[grep('_CH$', all_entry)]
en_entry <- sapply(ch_entry, function(.x) {sub('_CH$', '', .x)}, USE.NAMES = F)
writeLines(paste0(mapply(function(ch, en) {sprintf('\\defdoublelangentry{%s}{%s}\n', ch, en)}, ch_entry, en_entry, SIMPLIFY = T, USE.NAMES = F), collapse = ''), 'ch_en.tex')
renv::snapshot()
library(httr)
library(jsonlite)
owner <- "hxfan1227"
repo <- "curriculum-vitae"
path <- "data/cv.bib"
url <- paste0("https://api.github.com/repos/", owner, "/", repo, "/contents/", path)
response <- GET(url)
if (status_code(response) == 200) {
file_info <- fromJSON(content(response, "text"))
file_content <- file_info$content
decoded_content <- rawToChar(base64enc::base64decode(file_content))
writeLines(decoded_content, 'publications.bib')
} else {
# 如果请求失败，打印错误信息
cat("Failed to fetch file. Status code:", status_code(response), "\n")
}
paste(readLines('publications.bib'), collapse = "")
big_file <- paste(readLines('publications.bib'), collapse = "")
big_file <- unlist(strsplit(x = big_file, split = "@", fixed = TRUE))
big_file
big_file <- big_file[nchar(big_file) != 0]
big_file
file_list <- strsplit(x = big_file, split = "(,\t)|(,  )")
file_list
readLines('publications.bib')
sub('annotation', replacement = 'autor+an', big_file)
readLines('publications.bib')
sub('annotation', replacement = 'autor+an', readLines('publications.bib'))
lapply(readLines('publications.bib'), function(.x) {sub('annotation', replacement = 'autor+an', .x)})
sapply(readLines('publications.bib'), function(.x) {sub('annotation', replacement = 'autor+an', .x)})
sapply(readLines('publications.bib'), function(.x) {sub('annotation', replacement = 'autor+an', .x)}, USE.NAMES = F)
sapply(readLines('publications.bib'), function(.x) {sub('annotaion', replacement = 'autor+an', .x)}, USE.NAMES = F)
merge_bib <- function(fname1, fname2) {
writeLines(paste0(sapply(readLines(fname1), function(.x) {sub('annotaion', replacement = 'autor+an', .x)}, USE.NAMES = F), collapse = '\n'), fname1)
bib2 <- readLines(fname2)
con <- file(fname1, open = "a")
writeLines(bib2, con)
close(con)
}
merge_bib('publications.bib', 'ch_en.bib')
system.time()
Sys.Date()
lubridate::year(Sys.Date())
lubridate::year(Sys.Date()) - 5, lubridate::year(Sys.Date())
c(lubridate::year(Sys.Date()) - 5, lubridate::year(Sys.Date()))
Sys.Date() - lubridate::as.duration(5, years)
Sys.Date() - lubridate::as.duration(5, 'years')
Sys.Date() - lubridate::as.duration(5, 'year')
Sys.Date() - lubridate::duration(5, 'year')
library(httr)
library(jsonlite)
owner <- "hxfan1227"
repo <- "curriculum-vitae"
path <- "data/cv.bib"
url <- paste0("https://api.github.com/repos/", owner, "/", repo, "/contents/", path)
response <- GET(url)
if (status_code(response) == 200) {
file_info <- fromJSON(content(response, "text"))
file_content <- file_info$content
decoded_content <- rawToChar(base64enc::base64decode(file_content))
writeLines(decoded_content, 'publications.bib')
} else {
# 如果请求失败，打印错误信息
cat("Failed to fetch file. Status code:", status_code(response), "\n")
}
merge_bib <- function(fname1, fname2) {
writeLines(paste0(sapply(readLines(fname1), function(.x) {sub('annotaion', replacement = 'author+an', .x)}, USE.NAMES = F), collapse = '\n'), fname1)
bib2 <- readLines(fname2)
con <- file(fname1, open = "a")
writeLines(bib2, con)
close(con)
}
merge_bib('publications.bib', 'ch_en.bib')
renv::install('RefManageR')
library(RefManageR)
all_bib <- ReadBib('publications.bib')
all_bib
all_bib$ShiWuFanEtAl2025JoH
all_bib$CaoXuFanEtAl2022JoLS
all_bib$CaoXuFanEtAl2022JoLS
all_bib <- ReadBib('publications.bib', check = F)
all_bib$year
recent_bib <- all_bib[as.numeric(all_bib$year) >= (current_year - 5)]
current_year <- as.numeric(format(Sys.Date(), "%Y"))
recent_bib <- all_bib[as.numeric(all_bib$year) >= (current_year - 5)]
recent_bib
WriteBib(recent_bib, file = "recent_5yr.bib")
?ReadBib
?WriteBib
WriteBib(recent_bib, file = "recent_5yr.bib", encoding = 'UTF-8')
bib_text <- capture.output(PrintBibliography(recent_bib, .bibstyle = "bibtex"))
PrintBibliography(recent_bib, .bibstyle = "bibtex")
PrintBibliography(recent_bib)
?WriteBib(recent_bib, file = "recent_5yr.bib", encoding = 'UTF-8')
?PrintBibliography
bib_text <- capture.output(PrintBibliography(recent_bib, .opts = list(bib.style = "bibtex")))
bib_text
print(recent_bib)
print(recent_bib, .opts = list(style = 'Bibtex'))
all_bib <- ReadBib('publications.bib', check = F)
recent_bib <- all_bib[as.numeric(all_bib$year) >= (current_year - 5)]
print(recent_bib, .opts = list(style = 'Bibtex'))
print(recent_bib, .opts = list(style = 'Bibtex'))
recent_bib
renv::clean()
renv::snapshot()
paste(readLines('publications.bib'), collapse = "")
readLines('publications.bib')
big_file <- paste(readLines('publications.bib'), collapse = "")
big_file <- unlist(strsplit(x = big_file, split = "@", fixed = TRUE))
big_file
big_file <- big_file[nchar(big_file) != 0]
file_list <- strsplit(x = big_file, split = "(,\t)|(,  )")
file_list
library(httr)
library(jsonlite)
owner <- "hxfan1227"
repo <- "curriculum-vitae"
path <- "data/cv.bib"
url <- paste0("https://api.github.com/repos/", owner, "/", repo, "/contents/", path)
response <- GET(url)
if (status_code(response) == 200) {
file_info <- fromJSON(content(response, "text"))
file_content <- file_info$content
decoded_content <- rawToChar(base64enc::base64decode(file_content))
writeLines(decoded_content, 'publications.bib')
} else {
# 如果请求失败，打印错误信息
cat("Failed to fetch file. Status code:", status_code(response), "\n")
}
merge_bib <- function(fname1, fname2) {
writeLines(paste0(sapply(readLines(fname1), function(.x) {sub('annotaion', replacement = 'author+an', .x)}, USE.NAMES = F), collapse = '\n'), fname1)
bib2 <- readLines(fname2)
con <- file(fname1, open = "a")
writeLines(bib2, con)
close(con)
}
merge_bib('publications.bib', 'ch_en.bib')
big_file <- paste(readLines('publications.bib'), collapse = "")
big_file <- unlist(strsplit(x = big_file, split = "@", fixed = TRUE))
big_file <- big_file[nchar(big_file) != 0]
file_list <- strsplit(x = big_file, split = "(,\t)|(,  )")
all_entry <- sapply(file_list, function(.x) {sub('[a-z]*\\{', replacement = '', x = .x[1])}, USE.NAMES = F)
ch_entry <- all_entry[grep('_CH$', all_entry)]
en_entry <- sapply(ch_entry, function(.x) {sub('_CH$', '', .x)}, USE.NAMES = F)
writeLines(paste0(
mapply(
function(ch, en)
{sprintf('\\defdoublelangentry{%s}{%s}\n', ch, en)},
ch_entry, en_entry, SIMPLIFY = T, USE.NAMES = F),
collapse = ''),
'ch_en.tex')
